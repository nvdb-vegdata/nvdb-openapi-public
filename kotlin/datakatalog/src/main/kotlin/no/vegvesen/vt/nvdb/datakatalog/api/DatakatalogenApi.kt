/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package no.vegvesen.vt.nvdb.datakatalog.api

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import no.vegvesen.vt.nvdb.datakatalog.model.Egenskapstype
import no.vegvesen.vt.nvdb.datakatalog.model.EgenskapstypeKategori
import no.vegvesen.vt.nvdb.datakatalog.model.Enhet
import no.vegvesen.vt.nvdb.datakatalog.model.Kategori
import no.vegvesen.vt.nvdb.datakatalog.model.ProblemDetail
import no.vegvesen.vt.nvdb.datakatalog.model.ProductSpecification
import no.vegvesen.vt.nvdb.datakatalog.model.Vegobjekttype
import no.vegvesen.vt.nvdb.datakatalog.model.Versjon

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class DatakatalogenApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://nvdbapiles.atlas.vegvesen.no/datakatalog")
        }
    }

    /**
     * GET /api/v1/egenskapstyper/{egenskapstypeid}
     * Returnerer angitt egenskapstype
     * 
     * @param egenskapstypeid 
     * @return Egenskapstype
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getEgenskapstype(egenskapstypeid: kotlin.Int) : Egenskapstype {
        val localVarResponse = getEgenskapstypeWithHttpInfo(egenskapstypeid = egenskapstypeid)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Egenskapstype
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /api/v1/egenskapstyper/{egenskapstypeid}
     * Returnerer angitt egenskapstype
     * 
     * @param egenskapstypeid 
     * @return ApiResponse<Egenskapstype?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getEgenskapstypeWithHttpInfo(egenskapstypeid: kotlin.Int) : ApiResponse<Egenskapstype?> {
        val localVariableConfig = getEgenskapstypeRequestConfig(egenskapstypeid = egenskapstypeid)

        return request<Unit, Egenskapstype>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getEgenskapstype
     *
     * @param egenskapstypeid 
     * @return RequestConfig
     */
    fun getEgenskapstypeRequestConfig(egenskapstypeid: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/egenskapstyper/{egenskapstypeid}".replace("{"+"egenskapstypeid"+"}", encodeURIComponent(egenskapstypeid.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /api/v1/vegobjekttyper/{vegobjekttypeid}/{egenskapstypeid}
     * Returnerer angitt egenskapstype for angitt vegobjekttype
     * 
     * @param vegobjekttypeid 
     * @param egenskapstypeid 
     * @return Egenskapstype
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getEgenskapstypeForVegobjekttype(vegobjekttypeid: kotlin.Int, egenskapstypeid: kotlin.Int) : Egenskapstype {
        val localVarResponse = getEgenskapstypeForVegobjekttypeWithHttpInfo(vegobjekttypeid = vegobjekttypeid, egenskapstypeid = egenskapstypeid)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Egenskapstype
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /api/v1/vegobjekttyper/{vegobjekttypeid}/{egenskapstypeid}
     * Returnerer angitt egenskapstype for angitt vegobjekttype
     * 
     * @param vegobjekttypeid 
     * @param egenskapstypeid 
     * @return ApiResponse<Egenskapstype?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getEgenskapstypeForVegobjekttypeWithHttpInfo(vegobjekttypeid: kotlin.Int, egenskapstypeid: kotlin.Int) : ApiResponse<Egenskapstype?> {
        val localVariableConfig = getEgenskapstypeForVegobjekttypeRequestConfig(vegobjekttypeid = vegobjekttypeid, egenskapstypeid = egenskapstypeid)

        return request<Unit, Egenskapstype>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getEgenskapstypeForVegobjekttype
     *
     * @param vegobjekttypeid 
     * @param egenskapstypeid 
     * @return RequestConfig
     */
    fun getEgenskapstypeForVegobjekttypeRequestConfig(vegobjekttypeid: kotlin.Int, egenskapstypeid: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/vegobjekttyper/{vegobjekttypeid}/{egenskapstypeid}".replace("{"+"vegobjekttypeid"+"}", encodeURIComponent(vegobjekttypeid.toString())).replace("{"+"egenskapstypeid"+"}", encodeURIComponent(egenskapstypeid.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /api/v1/egenskapstypekategorier
     * Returnerer alle kategorier for egenskapstypene
     * 
     * @return kotlin.collections.List<EgenskapstypeKategori>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getEgenskapstypeKategorier() : kotlin.collections.List<EgenskapstypeKategori> {
        val localVarResponse = getEgenskapstypeKategorierWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<EgenskapstypeKategori>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /api/v1/egenskapstypekategorier
     * Returnerer alle kategorier for egenskapstypene
     * 
     * @return ApiResponse<kotlin.collections.List<EgenskapstypeKategori>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getEgenskapstypeKategorierWithHttpInfo() : ApiResponse<kotlin.collections.List<EgenskapstypeKategori>?> {
        val localVariableConfig = getEgenskapstypeKategorierRequestConfig()

        return request<Unit, kotlin.collections.List<EgenskapstypeKategori>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getEgenskapstypeKategorier
     *
     * @return RequestConfig
     */
    fun getEgenskapstypeKategorierRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/egenskapstypekategorier",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /api/v1/enheter
     * Returnerer alle enheter
     * 
     * @return kotlin.collections.List<Enhet>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getEnheter() : kotlin.collections.List<Enhet> {
        val localVarResponse = getEnheterWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Enhet>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /api/v1/enheter
     * Returnerer alle enheter
     * 
     * @return ApiResponse<kotlin.collections.List<Enhet>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getEnheterWithHttpInfo() : ApiResponse<kotlin.collections.List<Enhet>?> {
        val localVariableConfig = getEnheterRequestConfig()

        return request<Unit, kotlin.collections.List<Enhet>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getEnheter
     *
     * @return RequestConfig
     */
    fun getEnheterRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/enheter",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /api/v1/kategorier
     * Returnerer alle kategorier for vegobjekter
     * 
     * @return kotlin.collections.List<Kategori>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getKategorier() : kotlin.collections.List<Kategori> {
        val localVarResponse = getKategorierWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Kategori>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /api/v1/kategorier
     * Returnerer alle kategorier for vegobjekter
     * 
     * @return ApiResponse<kotlin.collections.List<Kategori>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getKategorierWithHttpInfo() : ApiResponse<kotlin.collections.List<Kategori>?> {
        val localVariableConfig = getKategorierRequestConfig()

        return request<Unit, kotlin.collections.List<Kategori>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getKategorier
     *
     * @return RequestConfig
     */
    fun getKategorierRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/kategorier",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /api/v1/vegobjekttyper/{vegobjekttypeid}/produktspesifikasjon
     * Returnerer produktspesifikasjonen til den angitte vegobjekttypen
     * 
     * @param vegobjekttypeid 
     * @return ProductSpecification
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getProduktspesifikasjon(vegobjekttypeid: kotlin.Int) : ProductSpecification {
        val localVarResponse = getProduktspesifikasjonWithHttpInfo(vegobjekttypeid = vegobjekttypeid)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ProductSpecification
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /api/v1/vegobjekttyper/{vegobjekttypeid}/produktspesifikasjon
     * Returnerer produktspesifikasjonen til den angitte vegobjekttypen
     * 
     * @param vegobjekttypeid 
     * @return ApiResponse<ProductSpecification?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getProduktspesifikasjonWithHttpInfo(vegobjekttypeid: kotlin.Int) : ApiResponse<ProductSpecification?> {
        val localVariableConfig = getProduktspesifikasjonRequestConfig(vegobjekttypeid = vegobjekttypeid)

        return request<Unit, ProductSpecification>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getProduktspesifikasjon
     *
     * @param vegobjekttypeid 
     * @return RequestConfig
     */
    fun getProduktspesifikasjonRequestConfig(vegobjekttypeid: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/vegobjekttyper/{vegobjekttypeid}/produktspesifikasjon".replace("{"+"vegobjekttypeid"+"}", encodeURIComponent(vegobjekttypeid.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter inkluder
     */
     enum class InkluderGetVegobjekttype(val value: kotlin.String) {
         @Json(name = "egenskapstyper") egenskapstyper("egenskapstyper"),
         @Json(name = "relasjonstyper") relasjonstyper("relasjonstyper"),
         @Json(name = "stedfesting") stedfesting("stedfesting"),
         @Json(name = "alle") alle("alle"),
         @Json(name = "minimum") minimum("minimum");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * GET /api/v1/vegobjekttyper/{vegobjekttypeid}
     * Returnerer angitt vegobjekttype
     * 
     * @param vegobjekttypeid 
     * @param inkluder Kommaseparert liste med hvilke informasjonsfelter som skal inkluderes i tillegg til vegobjekttypenes metadata. (optional)
     * @return Vegobjekttype
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getVegobjekttype(vegobjekttypeid: kotlin.Int, inkluder: kotlin.collections.List<InkluderGetVegobjekttype>? = null) : Vegobjekttype {
        val localVarResponse = getVegobjekttypeWithHttpInfo(vegobjekttypeid = vegobjekttypeid, inkluder = inkluder)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Vegobjekttype
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /api/v1/vegobjekttyper/{vegobjekttypeid}
     * Returnerer angitt vegobjekttype
     * 
     * @param vegobjekttypeid 
     * @param inkluder Kommaseparert liste med hvilke informasjonsfelter som skal inkluderes i tillegg til vegobjekttypenes metadata. (optional)
     * @return ApiResponse<Vegobjekttype?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getVegobjekttypeWithHttpInfo(vegobjekttypeid: kotlin.Int, inkluder: kotlin.collections.List<InkluderGetVegobjekttype>?) : ApiResponse<Vegobjekttype?> {
        val localVariableConfig = getVegobjekttypeRequestConfig(vegobjekttypeid = vegobjekttypeid, inkluder = inkluder)

        return request<Unit, Vegobjekttype>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getVegobjekttype
     *
     * @param vegobjekttypeid 
     * @param inkluder Kommaseparert liste med hvilke informasjonsfelter som skal inkluderes i tillegg til vegobjekttypenes metadata. (optional)
     * @return RequestConfig
     */
    fun getVegobjekttypeRequestConfig(vegobjekttypeid: kotlin.Int, inkluder: kotlin.collections.List<InkluderGetVegobjekttype>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (inkluder != null) {
                    put("inkluder", toMultiValue(inkluder.toList(), "multi"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/vegobjekttyper/{vegobjekttypeid}".replace("{"+"vegobjekttypeid"+"}", encodeURIComponent(vegobjekttypeid.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter inkluder
     */
     enum class InkluderGetVegobjekttyper(val value: kotlin.String) {
         @Json(name = "egenskapstyper") egenskapstyper("egenskapstyper"),
         @Json(name = "relasjonstyper") relasjonstyper("relasjonstyper"),
         @Json(name = "stedfesting") stedfesting("stedfesting"),
         @Json(name = "alle") alle("alle"),
         @Json(name = "minimum") minimum("minimum");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * GET /api/v1/vegobjekttyper
     * Returnerer alle vegobjekttypene
     * 
     * @param inkluder Kommaseparert liste med hvilke informasjonsfelter som skal inkluderes i tillegg til vegobjekttypenes metadata. (optional)
     * @param kategori Begrens vegobjekttyper etter kategori. (/vegobjekttyper/kategorier) (optional)
     * @return kotlin.collections.List<Vegobjekttype>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getVegobjekttyper(inkluder: kotlin.collections.List<InkluderGetVegobjekttyper>? = null, kategori: kotlin.Int? = null) : kotlin.collections.List<Vegobjekttype> {
        val localVarResponse = getVegobjekttyperWithHttpInfo(inkluder = inkluder, kategori = kategori)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Vegobjekttype>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /api/v1/vegobjekttyper
     * Returnerer alle vegobjekttypene
     * 
     * @param inkluder Kommaseparert liste med hvilke informasjonsfelter som skal inkluderes i tillegg til vegobjekttypenes metadata. (optional)
     * @param kategori Begrens vegobjekttyper etter kategori. (/vegobjekttyper/kategorier) (optional)
     * @return ApiResponse<kotlin.collections.List<Vegobjekttype>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getVegobjekttyperWithHttpInfo(inkluder: kotlin.collections.List<InkluderGetVegobjekttyper>?, kategori: kotlin.Int?) : ApiResponse<kotlin.collections.List<Vegobjekttype>?> {
        val localVariableConfig = getVegobjekttyperRequestConfig(inkluder = inkluder, kategori = kategori)

        return request<Unit, kotlin.collections.List<Vegobjekttype>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getVegobjekttyper
     *
     * @param inkluder Kommaseparert liste med hvilke informasjonsfelter som skal inkluderes i tillegg til vegobjekttypenes metadata. (optional)
     * @param kategori Begrens vegobjekttyper etter kategori. (/vegobjekttyper/kategorier) (optional)
     * @return RequestConfig
     */
    fun getVegobjekttyperRequestConfig(inkluder: kotlin.collections.List<InkluderGetVegobjekttyper>?, kategori: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (inkluder != null) {
                    put("inkluder", toMultiValue(inkluder.toList(), "multi"))
                }
                if (kategori != null) {
                    put("kategori", listOf(kategori.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/vegobjekttyper",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter inkluder
     */
     enum class InkluderGetVegobjekttyperHistorisk(val value: kotlin.String) {
         @Json(name = "egenskapstyper") egenskapstyper("egenskapstyper"),
         @Json(name = "relasjonstyper") relasjonstyper("relasjonstyper"),
         @Json(name = "stedfesting") stedfesting("stedfesting"),
         @Json(name = "alle") alle("alle"),
         @Json(name = "minimum") minimum("minimum");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * GET /api/v1/vegobjekttyper/historisk/{versjon}
     * Returnerer alle vegobjekttypene for en gitt versjon av datakatalogen, f.eks. 2.31
     * 
     * @param versjon 
     * @param inkluder Kommaseparert liste med hvilke informasjonsfelter som skal inkluderes i tillegg til vegobjekttypenes metadata. (optional)
     * @param kategori Begrens vegobjekttyper etter kategori. (/vegobjekttyper/kategorier) (optional)
     * @return kotlin.collections.List<Vegobjekttype>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getVegobjekttyperHistorisk(versjon: kotlin.String, inkluder: kotlin.collections.List<InkluderGetVegobjekttyperHistorisk>? = null, kategori: kotlin.Int? = null) : kotlin.collections.List<Vegobjekttype> {
        val localVarResponse = getVegobjekttyperHistoriskWithHttpInfo(versjon = versjon, inkluder = inkluder, kategori = kategori)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Vegobjekttype>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /api/v1/vegobjekttyper/historisk/{versjon}
     * Returnerer alle vegobjekttypene for en gitt versjon av datakatalogen, f.eks. 2.31
     * 
     * @param versjon 
     * @param inkluder Kommaseparert liste med hvilke informasjonsfelter som skal inkluderes i tillegg til vegobjekttypenes metadata. (optional)
     * @param kategori Begrens vegobjekttyper etter kategori. (/vegobjekttyper/kategorier) (optional)
     * @return ApiResponse<kotlin.collections.List<Vegobjekttype>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getVegobjekttyperHistoriskWithHttpInfo(versjon: kotlin.String, inkluder: kotlin.collections.List<InkluderGetVegobjekttyperHistorisk>?, kategori: kotlin.Int?) : ApiResponse<kotlin.collections.List<Vegobjekttype>?> {
        val localVariableConfig = getVegobjekttyperHistoriskRequestConfig(versjon = versjon, inkluder = inkluder, kategori = kategori)

        return request<Unit, kotlin.collections.List<Vegobjekttype>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getVegobjekttyperHistorisk
     *
     * @param versjon 
     * @param inkluder Kommaseparert liste med hvilke informasjonsfelter som skal inkluderes i tillegg til vegobjekttypenes metadata. (optional)
     * @param kategori Begrens vegobjekttyper etter kategori. (/vegobjekttyper/kategorier) (optional)
     * @return RequestConfig
     */
    fun getVegobjekttyperHistoriskRequestConfig(versjon: kotlin.String, inkluder: kotlin.collections.List<InkluderGetVegobjekttyperHistorisk>?, kategori: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (inkluder != null) {
                    put("inkluder", toMultiValue(inkluder.toList(), "multi"))
                }
                if (kategori != null) {
                    put("kategori", listOf(kategori.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/vegobjekttyper/historisk/{versjon}".replace("{"+"versjon"+"}", encodeURIComponent(versjon.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GET /api/v1/versjon
     * Returnerer aktiv versjon på datakatalog
     * 
     * @return Versjon
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getVersjon() : Versjon {
        val localVarResponse = getVersjonWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Versjon
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /api/v1/versjon
     * Returnerer aktiv versjon på datakatalog
     * 
     * @return ApiResponse<Versjon?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getVersjonWithHttpInfo() : ApiResponse<Versjon?> {
        val localVariableConfig = getVersjonRequestConfig()

        return request<Unit, Versjon>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getVersjon
     *
     * @return RequestConfig
     */
    fun getVersjonRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/versjon",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
