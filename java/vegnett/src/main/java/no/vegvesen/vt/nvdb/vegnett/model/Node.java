/*
 * NVDB API Les Vegnett
 * Dette API-et brukes til å lese vegnettelementer. Les mer om bruk av API-et på https://nvdb.test.atlas.vegvesen.no/produkter/nvdbapil/v4/Vegnett
 *
 * The version of the OpenAPI document: v4
 * Contact: nvdb@vegvesen.no
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package no.vegvesen.vt.nvdb.vegnett.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import no.vegvesen.vt.nvdb.vegnett.model.NodeGeometri;
import no.vegvesen.vt.nvdb.vegnett.model.Nodeport;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Node
 */
@JsonPropertyOrder({
  Node.JSON_PROPERTY_ID,
  Node.JSON_PROPERTY_HREF,
  Node.JSON_PROPERTY_STARTDATO,
  Node.JSON_PROPERTY_SLUTTDATO,
  Node.JSON_PROPERTY_KOMMUNER,
  Node.JSON_PROPERTY_GEOMETRI,
  Node.JSON_PROPERTY_PORTER
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class Node {
  public static final String JSON_PROPERTY_ID = "id";
  @jakarta.annotation.Nonnull
  private Long id;

  public static final String JSON_PROPERTY_HREF = "href";
  @jakarta.annotation.Nonnull
  private String href;

  public static final String JSON_PROPERTY_STARTDATO = "startdato";
  @jakarta.annotation.Nonnull
  private LocalDate startdato;

  public static final String JSON_PROPERTY_SLUTTDATO = "sluttdato";
  @jakarta.annotation.Nullable
  private LocalDate sluttdato;

  public static final String JSON_PROPERTY_KOMMUNER = "kommuner";
  @jakarta.annotation.Nonnull
  private Set<Integer> kommuner = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_GEOMETRI = "geometri";
  @jakarta.annotation.Nonnull
  private NodeGeometri geometri;

  public static final String JSON_PROPERTY_PORTER = "porter";
  @jakarta.annotation.Nonnull
  private List<Nodeport> porter = new ArrayList<>();

  public Node() {
  }

  public Node id(@jakarta.annotation.Nonnull Long id) {
    
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(@jakarta.annotation.Nonnull Long id) {
    this.id = id;
  }

  public Node href(@jakarta.annotation.Nonnull String href) {
    
    this.href = href;
    return this;
  }

  /**
   * Get href
   * @return href
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HREF)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getHref() {
    return href;
  }


  @JsonProperty(JSON_PROPERTY_HREF)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHref(@jakarta.annotation.Nonnull String href) {
    this.href = href;
  }

  public Node startdato(@jakarta.annotation.Nonnull LocalDate startdato) {
    
    this.startdato = startdato;
    return this;
  }

  /**
   * Get startdato
   * @return startdato
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STARTDATO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public LocalDate getStartdato() {
    return startdato;
  }


  @JsonProperty(JSON_PROPERTY_STARTDATO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStartdato(@jakarta.annotation.Nonnull LocalDate startdato) {
    this.startdato = startdato;
  }

  public Node sluttdato(@jakarta.annotation.Nullable LocalDate sluttdato) {
    
    this.sluttdato = sluttdato;
    return this;
  }

  /**
   * Get sluttdato
   * @return sluttdato
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SLUTTDATO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LocalDate getSluttdato() {
    return sluttdato;
  }


  @JsonProperty(JSON_PROPERTY_SLUTTDATO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSluttdato(@jakarta.annotation.Nullable LocalDate sluttdato) {
    this.sluttdato = sluttdato;
  }

  public Node kommuner(@jakarta.annotation.Nonnull Set<Integer> kommuner) {
    
    this.kommuner = kommuner;
    return this;
  }

  public Node addKommunerItem(Integer kommunerItem) {
    if (this.kommuner == null) {
      this.kommuner = new LinkedHashSet<>();
    }
    this.kommuner.add(kommunerItem);
    return this;
  }

  /**
   * Get kommuner
   * @return kommuner
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_KOMMUNER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Set<Integer> getKommuner() {
    return kommuner;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_KOMMUNER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setKommuner(@jakarta.annotation.Nonnull Set<Integer> kommuner) {
    this.kommuner = kommuner;
  }

  public Node geometri(@jakarta.annotation.Nonnull NodeGeometri geometri) {
    
    this.geometri = geometri;
    return this;
  }

  /**
   * Get geometri
   * @return geometri
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_GEOMETRI)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public NodeGeometri getGeometri() {
    return geometri;
  }


  @JsonProperty(JSON_PROPERTY_GEOMETRI)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setGeometri(@jakarta.annotation.Nonnull NodeGeometri geometri) {
    this.geometri = geometri;
  }

  public Node porter(@jakarta.annotation.Nonnull List<Nodeport> porter) {
    
    this.porter = porter;
    return this;
  }

  public Node addPorterItem(Nodeport porterItem) {
    if (this.porter == null) {
      this.porter = new ArrayList<>();
    }
    this.porter.add(porterItem);
    return this;
  }

  /**
   * Get porter
   * @return porter
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PORTER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<Nodeport> getPorter() {
    return porter;
  }


  @JsonProperty(JSON_PROPERTY_PORTER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPorter(@jakarta.annotation.Nonnull List<Nodeport> porter) {
    this.porter = porter;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Node node = (Node) o;
    return Objects.equals(this.id, node.id) &&
        Objects.equals(this.href, node.href) &&
        Objects.equals(this.startdato, node.startdato) &&
        Objects.equals(this.sluttdato, node.sluttdato) &&
        Objects.equals(this.kommuner, node.kommuner) &&
        Objects.equals(this.geometri, node.geometri) &&
        Objects.equals(this.porter, node.porter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, href, startdato, sluttdato, kommuner, geometri, porter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Node {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    startdato: ").append(toIndentedString(startdato)).append("\n");
    sb.append("    sluttdato: ").append(toIndentedString(sluttdato)).append("\n");
    sb.append("    kommuner: ").append(toIndentedString(kommuner)).append("\n");
    sb.append("    geometri: ").append(toIndentedString(geometri)).append("\n");
    sb.append("    porter: ").append(toIndentedString(porter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

