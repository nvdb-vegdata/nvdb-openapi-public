/*
 * NVDB API Les Vegnett
 * Dette API-et brukes til å lese vegnettelementer. Les mer om bruk av API-et på https://nvdb.test.atlas.vegvesen.no/produkter/nvdbapil/v4/Vegnett
 *
 * The version of the OpenAPI document: v4
 * Contact: nvdb@vegvesen.no
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package no.vegvesen.vt.nvdb.vegnett.model;

import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.HashMap;
import java.util.Map;
import no.vegvesen.vt.nvdb.vegnett.model.Posisjon;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * AlwaysIncludeMapStringPosisjon
 */
@JsonPropertyOrder({
  AlwaysIncludeMapStringPosisjon.JSON_PROPERTY_MAP,
  AlwaysIncludeMapStringPosisjon.JSON_PROPERTY_EMPTY
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class AlwaysIncludeMapStringPosisjon {
  public static final String JSON_PROPERTY_MAP = "map";
  @jakarta.annotation.Nullable
  private Map<String, Posisjon> map = new HashMap<>();

  public static final String JSON_PROPERTY_EMPTY = "empty";
  @jakarta.annotation.Nullable
  private Boolean empty;

  public AlwaysIncludeMapStringPosisjon() {
  }

  public AlwaysIncludeMapStringPosisjon map(@jakarta.annotation.Nullable Map<String, Posisjon> map) {
    
    this.map = map;
    return this;
  }

  public AlwaysIncludeMapStringPosisjon putMapItem(String key, Posisjon mapItem) {
    if (this.map == null) {
      this.map = new HashMap<>();
    }
    this.map.put(key, mapItem);
    return this;
  }

  /**
   * Get map
   * @return map
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MAP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, Posisjon> getMap() {
    return map;
  }


  @JsonProperty(JSON_PROPERTY_MAP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMap(@jakarta.annotation.Nullable Map<String, Posisjon> map) {
    this.map = map;
  }

  public AlwaysIncludeMapStringPosisjon empty(@jakarta.annotation.Nullable Boolean empty) {
    
    this.empty = empty;
    return this;
  }

  /**
   * Get empty
   * @return empty
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EMPTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEmpty() {
    return empty;
  }


  @JsonProperty(JSON_PROPERTY_EMPTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEmpty(@jakarta.annotation.Nullable Boolean empty) {
    this.empty = empty;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Posisjon> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   * @param key the name of the property
   * @param value the value of the property
   * @return self reference
   */
  @JsonAnySetter
  public AlwaysIncludeMapStringPosisjon putAdditionalProperty(String key, Posisjon value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Posisjon>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) properties.
   * @return the additional (undeclared) properties
   */
  @JsonAnyGetter
  public Map<String, Posisjon> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   * @param key the name of the property
   * @return the additional (undeclared) property with the specified name
   */
  public Posisjon getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlwaysIncludeMapStringPosisjon alwaysIncludeMapStringPosisjon = (AlwaysIncludeMapStringPosisjon) o;
    return Objects.equals(this.map, alwaysIncludeMapStringPosisjon.map) &&
        Objects.equals(this.empty, alwaysIncludeMapStringPosisjon.empty) &&
        Objects.equals(this.additionalProperties, alwaysIncludeMapStringPosisjon.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(map, empty, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlwaysIncludeMapStringPosisjon {\n");
    sb.append("    map: ").append(toIndentedString(map)).append("\n");
    sb.append("    empty: ").append(toIndentedString(empty)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

