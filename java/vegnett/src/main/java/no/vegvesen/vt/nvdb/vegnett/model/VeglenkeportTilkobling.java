/*
 * NVDB API Les Vegnett
 * Dette API-et brukes til å lese vegnettelementer. Les mer om bruk av API-et på https://nvdb.test.atlas.vegvesen.no/produkter/nvdbapil/v4/Vegnett
 *
 * The version of the OpenAPI document: v4
 * Contact: nvdb@vegvesen.no
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package no.vegvesen.vt.nvdb.vegnett.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * VeglenkeportTilkobling
 */
@JsonPropertyOrder({
  VeglenkeportTilkobling.JSON_PROPERTY_PORTNUMMER,
  VeglenkeportTilkobling.JSON_PROPERTY_NODEID,
  VeglenkeportTilkobling.JSON_PROPERTY_HREF
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class VeglenkeportTilkobling {
  public static final String JSON_PROPERTY_PORTNUMMER = "portnummer";
  @jakarta.annotation.Nonnull
  private Integer portnummer;

  public static final String JSON_PROPERTY_NODEID = "nodeid";
  @jakarta.annotation.Nonnull
  private Long nodeid;

  public static final String JSON_PROPERTY_HREF = "href";
  @jakarta.annotation.Nonnull
  private String href;

  public VeglenkeportTilkobling() {
  }

  public VeglenkeportTilkobling portnummer(@jakarta.annotation.Nonnull Integer portnummer) {
    
    this.portnummer = portnummer;
    return this;
  }

  /**
   * Get portnummer
   * @return portnummer
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PORTNUMMER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getPortnummer() {
    return portnummer;
  }


  @JsonProperty(JSON_PROPERTY_PORTNUMMER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPortnummer(@jakarta.annotation.Nonnull Integer portnummer) {
    this.portnummer = portnummer;
  }

  public VeglenkeportTilkobling nodeid(@jakarta.annotation.Nonnull Long nodeid) {
    
    this.nodeid = nodeid;
    return this;
  }

  /**
   * Get nodeid
   * @return nodeid
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NODEID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getNodeid() {
    return nodeid;
  }


  @JsonProperty(JSON_PROPERTY_NODEID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNodeid(@jakarta.annotation.Nonnull Long nodeid) {
    this.nodeid = nodeid;
  }

  public VeglenkeportTilkobling href(@jakarta.annotation.Nonnull String href) {
    
    this.href = href;
    return this;
  }

  /**
   * Get href
   * @return href
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HREF)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getHref() {
    return href;
  }


  @JsonProperty(JSON_PROPERTY_HREF)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHref(@jakarta.annotation.Nonnull String href) {
    this.href = href;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VeglenkeportTilkobling veglenkeportTilkobling = (VeglenkeportTilkobling) o;
    return Objects.equals(this.portnummer, veglenkeportTilkobling.portnummer) &&
        Objects.equals(this.nodeid, veglenkeportTilkobling.nodeid) &&
        Objects.equals(this.href, veglenkeportTilkobling.href);
  }

  @Override
  public int hashCode() {
    return Objects.hash(portnummer, nodeid, href);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VeglenkeportTilkobling {\n");
    sb.append("    portnummer: ").append(toIndentedString(portnummer)).append("\n");
    sb.append("    nodeid: ").append(toIndentedString(nodeid)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

