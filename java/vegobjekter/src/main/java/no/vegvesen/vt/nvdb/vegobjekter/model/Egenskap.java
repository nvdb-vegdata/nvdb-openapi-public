/*
 * NVDB API Les Vegobjekter
 * Dette API-et brukes til å lese vegobjekter. Les mer om bruk av API-et på https://nvdb.atlas.vegvesen.no/produkter/nvdbapil/v4/Vegobjekter
 *
 * The version of the OpenAPI document: v4
 * Contact: nvdb@vegvesen.no
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package no.vegvesen.vt.nvdb.vegobjekter.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Egenskap
 */
@JsonPropertyOrder({
  Egenskap.JSON_PROPERTY_ID,
  Egenskap.JSON_PROPERTY_NAVN,
  Egenskap.JSON_PROPERTY_EGENSKAPSTYPE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
@JsonIgnoreProperties(
  value = "egenskapstype", // ignore manually set egenskapstype, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the egenskapstype to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "egenskapstype", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = AssosiasjonEgenskap.class, name = "Assosiasjon"),
  @JsonSubTypes.Type(value = BinaerEgenskap.class, name = "Binær"),
  @JsonSubTypes.Type(value = BoolskEgenskap.class, name = "Boolsk"),
  @JsonSubTypes.Type(value = DatoEgenskap.class, name = "Dato"),
  @JsonSubTypes.Type(value = FlyttallEgenskap.class, name = "Flyttall"),
  @JsonSubTypes.Type(value = FlyttallEnumEgenskap.class, name = "Flyttallenum"),
  @JsonSubTypes.Type(value = GeometriEgenskap.class, name = "Geometri"),
  @JsonSubTypes.Type(value = HeltallEgenskap.class, name = "Heltall"),
  @JsonSubTypes.Type(value = HeltallEnumEgenskap.class, name = "Heltallenum"),
  @JsonSubTypes.Type(value = KortDatoEgenskap.class, name = "Kortdato"),
  @JsonSubTypes.Type(value = ListeEgenskap.class, name = "Liste"),
  @JsonSubTypes.Type(value = StedfestingEgenskap.class, name = "Stedfesting"),
  @JsonSubTypes.Type(value = StrukturEgenskap.class, name = "Struktur"),
  @JsonSubTypes.Type(value = TekstEgenskap.class, name = "Tekst"),
  @JsonSubTypes.Type(value = TekstEnumEgenskap.class, name = "Tekstenum"),
  @JsonSubTypes.Type(value = TidEgenskap.class, name = "Tid"),
})

public class Egenskap {
  public static final String JSON_PROPERTY_ID = "id";
  @jakarta.annotation.Nonnull
  protected Integer id;

  public static final String JSON_PROPERTY_NAVN = "navn";
  @jakarta.annotation.Nonnull
  protected String navn;

  /**
   * Gets or Sets egenskapstype
   */
  public enum EgenskapstypeEnum {
    ASSOSIASJON(String.valueOf("Assosiasjon")),
    
    BOOLSK(String.valueOf("Boolsk")),
    
    BIN_R(String.valueOf("Binær")),
    
    TEKST(String.valueOf("Tekst")),
    
    DATO(String.valueOf("Dato")),
    
    FLYTTALL(String.valueOf("Flyttall")),
    
    HELTALL(String.valueOf("Heltall")),
    
    STRUKTUR(String.valueOf("Struktur")),
    
    GEOMETRI(String.valueOf("Geometri")),
    
    STEDFESTING(String.valueOf("Stedfesting")),
    
    KORTDATO(String.valueOf("Kortdato")),
    
    TID(String.valueOf("Tid")),
    
    LISTE(String.valueOf("Liste")),
    
    TEKSTENUM(String.valueOf("Tekstenum")),
    
    HELTALLENUM(String.valueOf("Heltallenum")),
    
    FLYTTALLENUM(String.valueOf("Flyttallenum"));

    private String value;

    EgenskapstypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static EgenskapstypeEnum fromValue(String value) {
      for (EgenskapstypeEnum b : EgenskapstypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_EGENSKAPSTYPE = "egenskapstype";
  @jakarta.annotation.Nonnull
  protected EgenskapstypeEnum egenskapstype;

  public Egenskap() {
  }

  public Egenskap id(@jakarta.annotation.Nonnull Integer id) {
    
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(@jakarta.annotation.Nonnull Integer id) {
    this.id = id;
  }

  public Egenskap navn(@jakarta.annotation.Nonnull String navn) {
    
    this.navn = navn;
    return this;
  }

  /**
   * Get navn
   * @return navn
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAVN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getNavn() {
    return navn;
  }


  @JsonProperty(JSON_PROPERTY_NAVN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNavn(@jakarta.annotation.Nonnull String navn) {
    this.navn = navn;
  }

  public Egenskap egenskapstype(@jakarta.annotation.Nonnull EgenskapstypeEnum egenskapstype) {
    
    this.egenskapstype = egenskapstype;
    return this;
  }

  /**
   * Get egenskapstype
   * @return egenskapstype
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EGENSKAPSTYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public EgenskapstypeEnum getEgenskapstype() {
    return egenskapstype;
  }


  @JsonProperty(JSON_PROPERTY_EGENSKAPSTYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEgenskapstype(@jakarta.annotation.Nonnull EgenskapstypeEnum egenskapstype) {
    this.egenskapstype = egenskapstype;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Egenskap egenskap = (Egenskap) o;
    return Objects.equals(this.id, egenskap.id) &&
        Objects.equals(this.navn, egenskap.navn) &&
        Objects.equals(this.egenskapstype, egenskap.egenskapstype);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, navn, egenskapstype);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Egenskap {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    navn: ").append(toIndentedString(navn)).append("\n");
    sb.append("    egenskapstype: ").append(toIndentedString(egenskapstype)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

