/*
 * NVDB API Les Vegobjekter
 * Dette API-et brukes til å lese vegobjekter. Les mer om bruk av API-et på https://nvdb.atlas.vegvesen.no/produkter/nvdbapil/v4/Vegobjekter
 *
 * The version of the OpenAPI document: v4
 * Contact: nvdb@vegvesen.no
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package no.vegvesen.vt.nvdb.vegobjekter.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import no.vegvesen.vt.nvdb.vegobjekter.model.VegobjektType;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Relasjon
 */
@JsonPropertyOrder({
  Relasjon.JSON_PROPERTY_ID,
  Relasjon.JSON_PROPERTY_TYPE,
  Relasjon.JSON_PROPERTY_LISTEID,
  Relasjon.JSON_PROPERTY_RELASJONSTYPE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
@JsonIgnoreProperties(
  value = "relasjonstype", // ignore manually set relasjonstype, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the relasjonstype to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "relasjonstype", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = RelasjonMedIder.class, name = "vegobjektIder"),
  @JsonSubTypes.Type(value = RelasjonMedVegobjekter.class, name = "vegobjekter"),
})

public class Relasjon {
  public static final String JSON_PROPERTY_ID = "id";
  @jakarta.annotation.Nonnull
  protected Integer id;

  public static final String JSON_PROPERTY_TYPE = "type";
  @jakarta.annotation.Nonnull
  protected VegobjektType type;

  public static final String JSON_PROPERTY_LISTEID = "listeid";
  @jakarta.annotation.Nullable
  protected Integer listeid;

  /**
   * Gets or Sets relasjonstype
   */
  public enum RelasjonstypeEnum {
    VEGOBJEKTER(String.valueOf("vegobjekter")),
    
    VEGOBJEKT_IDER(String.valueOf("vegobjektIder"));

    private String value;

    RelasjonstypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static RelasjonstypeEnum fromValue(String value) {
      for (RelasjonstypeEnum b : RelasjonstypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_RELASJONSTYPE = "relasjonstype";
  @jakarta.annotation.Nonnull
  protected RelasjonstypeEnum relasjonstype;

  public Relasjon() {
  }

  public Relasjon id(@jakarta.annotation.Nonnull Integer id) {
    
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(@jakarta.annotation.Nonnull Integer id) {
    this.id = id;
  }

  public Relasjon type(@jakarta.annotation.Nonnull VegobjektType type) {
    
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public VegobjektType getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(@jakarta.annotation.Nonnull VegobjektType type) {
    this.type = type;
  }

  public Relasjon listeid(@jakarta.annotation.Nullable Integer listeid) {
    
    this.listeid = listeid;
    return this;
  }

  /**
   * Get listeid
   * @return listeid
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LISTEID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getListeid() {
    return listeid;
  }


  @JsonProperty(JSON_PROPERTY_LISTEID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setListeid(@jakarta.annotation.Nullable Integer listeid) {
    this.listeid = listeid;
  }

  public Relasjon relasjonstype(@jakarta.annotation.Nonnull RelasjonstypeEnum relasjonstype) {
    
    this.relasjonstype = relasjonstype;
    return this;
  }

  /**
   * Get relasjonstype
   * @return relasjonstype
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RELASJONSTYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public RelasjonstypeEnum getRelasjonstype() {
    return relasjonstype;
  }


  @JsonProperty(JSON_PROPERTY_RELASJONSTYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRelasjonstype(@jakarta.annotation.Nonnull RelasjonstypeEnum relasjonstype) {
    this.relasjonstype = relasjonstype;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Relasjon relasjon = (Relasjon) o;
    return Objects.equals(this.id, relasjon.id) &&
        Objects.equals(this.type, relasjon.type) &&
        Objects.equals(this.listeid, relasjon.listeid) &&
        Objects.equals(this.relasjonstype, relasjon.relasjonstype);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, listeid, relasjonstype);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Relasjon {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    listeid: ").append(toIndentedString(listeid)).append("\n");
    sb.append("    relasjonstype: ").append(toIndentedString(relasjonstype)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

