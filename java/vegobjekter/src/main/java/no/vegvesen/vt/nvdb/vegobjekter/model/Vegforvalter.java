/*
 * NVDB API Les Vegobjekter
 * Dette API-et brukes til å lese vegobjekter. Les mer om bruk av API-et på https://nvdb.atlas.vegvesen.no/produkter/nvdbapil/v4/Vegobjekter
 *
 * The version of the OpenAPI document: v4
 * Contact: nvdb@vegvesen.no
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package no.vegvesen.vt.nvdb.vegobjekter.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Vegforvalter
 */
@JsonPropertyOrder({
  Vegforvalter.JSON_PROPERTY_ENUMID,
  Vegforvalter.JSON_PROPERTY_VEGFORVALTER
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class Vegforvalter {
  public static final String JSON_PROPERTY_ENUMID = "enumid";
  @jakarta.annotation.Nonnull
  private Integer enumid;

  public static final String JSON_PROPERTY_VEGFORVALTER = "vegforvalter";
  @jakarta.annotation.Nonnull
  private String vegforvalter;

  public Vegforvalter() {
  }

  public Vegforvalter enumid(@jakarta.annotation.Nonnull Integer enumid) {
    
    this.enumid = enumid;
    return this;
  }

  /**
   * Get enumid
   * @return enumid
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ENUMID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getEnumid() {
    return enumid;
  }


  @JsonProperty(JSON_PROPERTY_ENUMID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEnumid(@jakarta.annotation.Nonnull Integer enumid) {
    this.enumid = enumid;
  }

  public Vegforvalter vegforvalter(@jakarta.annotation.Nonnull String vegforvalter) {
    
    this.vegforvalter = vegforvalter;
    return this;
  }

  /**
   * Get vegforvalter
   * @return vegforvalter
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_VEGFORVALTER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getVegforvalter() {
    return vegforvalter;
  }


  @JsonProperty(JSON_PROPERTY_VEGFORVALTER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setVegforvalter(@jakarta.annotation.Nonnull String vegforvalter) {
    this.vegforvalter = vegforvalter;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Vegforvalter vegforvalter = (Vegforvalter) o;
    return Objects.equals(this.enumid, vegforvalter.enumid) &&
        Objects.equals(this.vegforvalter, vegforvalter.vegforvalter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enumid, vegforvalter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Vegforvalter {\n");
    sb.append("    enumid: ").append(toIndentedString(enumid)).append("\n");
    sb.append("    vegforvalter: ").append(toIndentedString(vegforvalter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

